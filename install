#!/usr/bin/env bash

set -o errexit

SKIP_SYSTEM_PACKAGES="${1:-}"

APT_PACKAGES="curl fd-find git iproute2 python3-pip ripgrep tmux wl-clipboard zsh xz-utils"
APT_PACKAGES_OPTIONAL="gnupg htop inotify-tools jq pass pwgen rsync unzip"

BREW_PACKAGES="diffutils fd git nvim python ripgrep shellcheck shfmt tmux zsh xz"
BREW_PACKAGES_OPTIONAL="gnupg htop jq pass pwgen rsync"

INSTALL_NVIM_VERSION="v0.10.4"
INSTALL_SHELLCHECK_VERSION="v0.10.0"
INSTALL_SHFMT_VERSION="V3.11.0"
INSTALL_ASDF_VERSION="v0.11.0"
INSTALL_NODE_VERSION="18.17.0"

CPU_ARCH="$(uname -m)"
OS_TYPE="$(uname | tr "[:upper:]" "[:lower:]")"
CLONE_PATH=

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

_no_system_packages() {
  cat <<EOF
System package installation isn't supported with your OS / distro.

Please install any dependent packages on your own. You can view the list at:

    https://github.com/nickjj/dotfiles/blob/master/install

Then re-run the script and explicitly skip installing system packages:

    bash <(curl -sS https://raw.githubusercontent.com/nickjj/dotfiles/master/install) --skip-system-packages
EOF

  exit 1
}

_install_packages_apt() {
  # shellcheck disable=SC2086
  sudo apt-get update && sudo apt-get install -y ${APT_PACKAGES} ${APT_PACKAGES_OPTIONAL}

  local original_cpu_arch="${CPU_ARCH}"

  # ShellCheck uses a different file name than what uname -m may output. I have
  # no idea if this will work since I have no arm64 Linux device to test on.
  [[ "${CPU_ARCH}" =~ ^arm ]] && CPU_ARCH="armv6hf"

  # We're only doing this on Linux because macOS has the latest versions
  # available with brew and we want the latest releases of each of these tools.
  local shellcheck_install_path="/tmp/shellcheck"
  local shellcheck_xz_path="/tmp/shellcheck.tar.xz"
  curl -s -o "${shellcheck_xz_path}" -L "https://github.com/koalaman/shellcheck/releases/download/${INSTALL_SHELLCHECK_VERSION}/shellcheck-${INSTALL_SHELLCHECK_VERSION}.${OS_TYPE}.${CPU_ARCH}.tar.xz" &&
    mkdir -p "${shellcheck_install_path}" &&
    tar -xJf "${shellcheck_xz_path}" -C "${shellcheck_install_path}" --strip-components=1 &&
    chmod +x "${shellcheck_install_path}/shellcheck" &&
    sudo mv "${_}" /usr/local/bin &&
    rm -rf "${shellcheck_xz_path}"

  CPU_ARCH="${original_cpu_arch}"

  # shfmt uses a different file name than what uname -m will output.
  [[ "${CPU_ARCH}" == "x86_64" ]] && CPU_ARCH="amd64"

  curl -s -o /tmp/shfmt -L "https://github.com/mvdan/sh/releases/download/${INSTALL_SHFMT_VERSION}/shfmt_${INSTALL_SHFMT_VERSION}_${OS_TYPE}_${CPU_ARCH}" &&
    chmod +x /tmp/shfmt && sudo mv "${_}" /usr/local/bin

  CPU_ARCH="${original_cpu_arch}"

  local nvim_gz_path="/tmp/nvim.tar.gz"
  curl -s -o "${nvim_gz_path}" -L "https://github.com/neovim/neovim/releases/download/${INSTALL_NVIM_VERSION}/nvim-${OS_TYPE}-${CPU_ARCH}.tar.gz" &&
    tar -xzf "${nvim_gz_path}" -C "${HOME}/.local" --strip-components=1 &&
    rm -rf "${nvim_gz_path}"
}

_install_packages_brew() {
  # Install brew itself.
  [ -x "$(command -v brew >/dev/null 2>&1)" ] &&
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Ensure brew's paths are available for this script
  eval "$(/opt/homebrew/bin/brew shellenv)"

  # shellcheck disable=SC2086
  brew install ${BREW_PACKAGES} ${BREW_PACKAGES_OPTIONAL}
}

_display_packages() {
  if [ "${OS_TYPE}" == "linux" ]; then
    echo "${APT_PACKAGES} ${APT_PACKAGES_OPTIONAL}"
  else
    echo "${BREW_PACKAGES} ${BREW_PACKAGES_OPTIONAL}"
  fi
}

# -----------------------------------------------------------------------------
# Main functions
# -----------------------------------------------------------------------------

detect_env() {
  case "${OS_TYPE}" in
  linux)
    if [ ! -f "/etc/debian_version" ]; then
      [ -z "${SKIP_SYSTEM_PACKAGES}" ] && _no_system_packages
    fi

    ;;
  darwin) ;;
  *)
    exit 1

    ;;
  esac
}

create_initial_dirs() {
  mkdir -p "${HOME}/.config/tmux/plugins" "${HOME}/.config/zsh" "${HOME}/.cache/zsh" \
    "${HOME}/.local/bin" "${HOME}/.local/share"
}

install_packages() {
  if [ -n "${SKIP_SYSTEM_PACKAGES}" ]; then
    echo "SKIPPED: Installing system packages"
    return
  fi

  cat <<EOF

If you choose yes, all of the system packages below will be installed:

$(_display_packages)

If you choose no, the above packages will not be installed and this script
will exit. This gives you a chance to edit the list of packages if you don't
agree with any of the decisions.

The packages listed after xz are technically optional but are quite useful.
Certain aliases depend on these optional packages being installed.

EOF

  while true; do
    read -rp "Do you want to install the above packages? (y/n) " yn
    case "${yn}" in
    [Yy]*)
      if [ "${OS_TYPE}" == "linux" ]; then
        _install_packages_apt
      else
        _install_packages_brew
      fi

      break
      ;;
    [Nn]*) exit ;;
    *) printf "Please answer y or n\n\n" ;;
    esac
  done

}

clone_dotfiles() {
  read -rep $'\nWhere do you want to clone these dotfiles to [~/dotfiles]? ' clone_path
  CLONE_PATH="${clone_path:-"${HOME}/dotfiles"}"

  # Ensure path doesn't exist.
  while [ -e "${CLONE_PATH}" ]; do
    read -rep $'\n Clone path exists, try again? (y) ' y
    case "${y}" in
    [Yy]*)

      break
      ;;
    *) echo "Please answer y or CTRL+c the script to abort everything" ;;
    esac
  done

  echo

  # This is used to locally develop the install script.
  if [ "${DEBUG}" == "1" ]; then
    cp -R "${PWD}/." "${CLONE_PATH}"
  else
    git clone https://github.com/nickjj/dotfiles "${CLONE_PATH}"
  fi
}

configure_brew() {
  if [ "${OS_TYPE}" == "darwin" ]; then
    local zsh_profile="${HOME}/.config/zsh/.zprofile"

    if ! grep -q "eval.*homebrew.*shellenv" "${zsh_profile}" 2>/dev/null; then
      # shellcheck disable=SC2016
      printf '\neval "$(/opt/homebrew/bin/brew shellenv)"\n' >>"${zsh_profile}"
    fi
  fi
}

install_zsh_plugins() {
  "${CLONE_PATH}/.local/bin/update-zsh-plugins"
}

install_fzf() {
  local fzf_path="${HOME}/.local/share/fzf"

  rm -rf "${fzf_path}"
  git clone --depth 1 https://github.com/junegunn/fzf.git "${fzf_path}" &&
    yes | "${fzf_path}/install" --bin --no-update-rc
}

create_symlinks() {
  cat <<EOF

-------------------------------------------------------------------------------

ln -fs "${CLONE_PATH}/.zshenv" "${HOME}/.zshenv"
ln -fs "${CLONE_PATH}/.config/zsh/.zshrc" "${HOME}/.config/zsh/.zshrc"
ln -fs "${CLONE_PATH}/.config/zsh/.zshrc.local" "${HOME}/.config/zsh/.zshrc.local"
ln -fs "${CLONE_PATH}/.config/zsh/.zprofile" "${HOME}/.config/zsh/.zprofile"
ln -fs "${CLONE_PATH}/.config/zsh/.zprofile.local" "${HOME}/.config/zsh/.zprofile.local"
ln -fs "${CLONE_PATH}/.config/zsh/.aliases" "${HOME}/.config/zsh/.aliases"
ln -fs "${CLONE_PATH}/.config/zsh/.aliases.local" "${HOME}/.config/zsh/.aliases.local"
ln -fs "${CLONE_PATH}/.config/tmux/tmux.conf" "${HOME}/.config/tmux/tmux.conf"
ln -fs "${CLONE_PATH}/.config/zsh/themes" "${HOME}/.config/zsh/themes"
ln -fs "${CLONE_PATH}/.config/tmux/themes" "${HOME}/.config/tmux/themes"
ln -fs "${CLONE_PATH}/.config/gitui" "${HOME}/.config/gitui"
ln -fs "${CLONE_PATH}/.config/nvim" "${HOME}/.config/nvim"
ln -fs "${CLONE_PATH}/.gitconfig" "${HOME}/.gitconfig"
ln -fs "${CLONE_PATH}/.local/lib/css" "${HOME}/.local/lib/css"
ln -fs "${CLONE_PATH}/.local/bin/"* "${HOME}/.local/bin/"

# And if you happen to be using WSL:
sudo ln -fs "${CLONE_PATH}/etc/wsl.conf" /etc/wsl.conf

-------------------------------------------------------------------------------

A potentially dangerous action is about to happen. The above directories and
files are going to get forcefully symlinked.

What does that mean?

Any config files you have on the right hand side of the paths are going to get
overwritten with the files that come with these dotfiles (left side).

If you care about your original config files now would be the time to back
them up. They will all be overwritten if you say yes to the prompt below.
EOF

  while true; do
    read -rep $'\nReady to continue and apply the symlinks? (y) ' y
    case "${y}" in
    [Yy]*)

      break
      ;;
    *) echo "Please answer y or CTRL+c the script to abort" ;;
    esac
  done

  ln -fs "${CLONE_PATH}/.zshenv" "${HOME}/.zshenv" &&
    ln -fs "${CLONE_PATH}/.config/zsh/.zshrc" "${HOME}/.config/zsh/.zshrc" &&
    ln -fs "${CLONE_PATH}/.config/zsh/.zshrc.local" "${HOME}/.config/zsh/.zshrc.local" &&
    ln -fs "${CLONE_PATH}/.config/zsh/.zprofile" "${HOME}/.config/zsh/.zprofile" &&
    ln -fs "${CLONE_PATH}/.config/zsh/.zprofile.local" "${HOME}/.config/zsh/.zprofile.local" &&
    ln -fs "${CLONE_PATH}/.config/zsh/.aliases" "${HOME}/.config/zsh/.aliases" &&
    ln -fs "${CLONE_PATH}/.config/zsh/.aliases.local" "${HOME}/.config/zsh/.aliases.local" &&
    ln -fs "${CLONE_PATH}/.config/tmux/tmux.conf" "${HOME}/.config/tmux/tmux.conf" &&
    ln -fs "${CLONE_PATH}/.config/zsh/themes" "${HOME}/.config/zsh/themes" &&
    ln -fs "${CLONE_PATH}/.config/tmux/themes" "${HOME}/.config/tmux/themes" &&
    ln -fs "${CLONE_PATH}/.config/gitui" "${HOME}/.config/gitui" &&
    ln -fs "${CLONE_PATH}/.config/nvim" "${HOME}/.config/nvim" &&
    ln -fs "${CLONE_PATH}/.gitconfig" "${HOME}/.gitconfig" &&
    ln -fs "${CLONE_PATH}/.local/lib/css" "${HOME}/.local/lib/css" &&
    ln -fs "${CLONE_PATH}/.local/bin/"* "${HOME}/.local/bin/"

  if grep -qE "(Microsoft|microsoft|WSL)" /proc/version &>/dev/null; then
    sudo ln -fs "${CLONE_PATH}/etc/wsl.conf" /etc/wsl.conf
  fi
}

configure_shell() {
  echo "# Any settings defined here are gitignored" |
    tee "${CLONE_PATH}/.config/zsh/"{.zshrc.local,.zprofile.local,.aliases.local} >/dev/null

  [ "${OS_TYPE}" != "darwin" ] && chsh -s "$(command -v zsh)"

  # shellcheck disable=SC1091
  . "${HOME}/.config/zsh/.zprofile"
}

configure_git() {
  cp "${CLONE_PATH}/.gitconfig.user" "${HOME}/.gitconfig.user"
}

install_asdf() {
  printf "\n\nInstalling asdf %s...\n" "${INSTALL_ASDF_VERSION}"

  local asdf_path="${HOME}/.local/share/asdf"

  rm -rf "${asdf_path}"
  git clone --depth 1 https://github.com/asdf-vm/asdf.git --branch "${INSTALL_ASDF_VERSION}" \
    "${asdf_path}"

  # shellcheck disable=SC1091
  . "${asdf_path}/asdf.sh"

  printf "\n\nInstalling node %s...\n" "${INSTALL_NODE_VERSION}"

  "${asdf_path}/bin/asdf" plugin add nodejs || true
  "${asdf_path}/bin/asdf" install nodejs "${INSTALL_NODE_VERSION}"
  "${asdf_path}/bin/asdf" global nodejs "${INSTALL_NODE_VERSION}"

  npm install --unsafe-perm=true --allow-root --global yarn
}

install_tmux_plugins() {
  printf "\n\nInstalling tmux plugins...\n"

  local tpm_path="${HOME}/.config/tmux/plugins/tpm"

  rm -rf "${tpm_path}"
  git clone --depth 1 https://github.com/tmux-plugins/tpm "${tpm_path}"

  "${tpm_path}/bin/install_plugins"
}

install_nvim_plugins() {
  printf "\n\nInstalling Neovim plugins...\n"

  nvim +q
}

completed_message() {
  cat <<EOF
Everything was installed successfully!

Check out the README file on GitHub to do 1 quick thing manually:

https://github.com/nickjj/dotfiles#did-you-install-everything-successfully

You can safely close this terminal.

The next time you open your terminal zsh will be ready to go!
EOF

  if [ "${OS_TYPE}" == "darwin" ]; then
    cat <<EOF

P.S., it looks like you're on macOS.

If you're using iTerm2 as your terminal you'll want to goto Settings ->
Profiles -> Keys (tab) and then change your ALT keys to use "Esc+" instead of
"Normal", otherwise ALT+x keymaps in Neovim may not work.

If you're not using iTerm2 you may still need to do similar steps.
EOF
  fi
}

detect_env
create_initial_dirs
install_packages
clone_dotfiles
configure_brew
install_zsh_plugins
install_fzf
create_symlinks
configure_shell
configure_git
install_asdf
install_tmux_plugins
install_nvim_plugins
completed_message
