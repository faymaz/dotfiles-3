#!/usr/bin/env bash
# Install these dotfiles, run: ./install --help for help and examples.

set -o errexit

SKIP_SYSTEM_PACKAGES="${1:-}"

ONLY_UPDATE=

# Use personalized configuration.
FIRST_RUN=1
if [ -f "${DOTFILES_PATH}/install-config" ]; then
  # shellcheck disable=SC1091
  . "${DOTFILES_PATH}/install-config"
  FIRST_RUN=
fi

DOTFILES_URL="${DOTFILES_URL:-https://github.com/nickjj/dotfiles}"
DOTFILES_PATH="${DOTFILES_PATH:-}"

YOUR_NAME="${YOUR_NAME:-}"
YOUR_EMAIL="${YOUR_EMAIL:-}"

PACMAN_PACKAGES="${PACMAN_PACKAGES:-
  aspell
  base
  base-devel
  bc
  curl
  fastfetch
  fd
  fzf
  git
  git-delta
  gnupg
  htop
  inotify-tools
  jq
  less
  man-db
  man-pages
  mise
  neovim
  openbsd-netcat
  openssh
  pacman-contrib
  pass
  pwgen
  ripgrep
  rsync
  shellcheck
  shfmt
  tmux
  unzip
  wget
  whois
  wl-clipboard
  zip
  zsh
}
"
PACMAN_PACKAGES_EXTRAS="${PACMAN_PACKAGES_EXTRAS:-}"

APT_PACKAGES="${APT_PACKAGES:-
  aspell
  bc
  build-essential
  curl
  git
  gnupg
  htop
  inotify-tools
  iproute2
  netcat-openbsd
  openssh-server
  pass
  pwgen
  rsync
  tmux
  unzip
  wget
  whois
  wl-clipboard
  xz-utils
  zip
  zsh
}
"
APT_PACKAGES_EXTRAS="${APT_PACKAGES_EXTRAS:-}"

BREW_PACKAGES="${BREW_PACKAGES:-
  aspell
  bash
  bc
  curl
  diffutils
  fastfetch
  fd
  fzf
  git
  git-delta
  gnupg
  htop
  inotify-tools
  jq
  mise
  nvim
  openssh
  pass
  pwgen
  ripgrep
  rsync
  shellcheck
  shfmt
  tmux
  unzip
  wget
  xz
  zsh
}
"
BREW_PACKAGES_EXTRAS="${BREW_PACKAGES_EXTRAS:-}"

MISE_PACKAGES_ARCH="${MISE_PACKAGES_ARCH:-}"
MISE_PACKAGES_ARCH_EXTRAS="${MISE_PACKAGES_ARCH_EXTRAS:-}"

MISE_PACKAGES_DEBIAN="${MISE_PACKAGES_DEBIAN:-
  fd
  fzf
  jq
  neovim
  ripgrep
  shellcheck
  shfmt
}
"
MISE_PACKAGES_DEBIAN_EXTRAS="${MISE_PACKAGES_DEBIAN_EXTRAS:-}"

MISE_PACKAGES_MACOS="${MISE_PACKAGES_MACOS:-}"
MISE_PACKAGES_MACOS_EXTRAS="${MISE_PACKAGES_MACOS_EXTRAS:-}"

declare -A MISE_LANGUAGES
MISE_LANGUAGES["node"]="node@22.14"
MISE_LANGUAGES["python"]="python@3.13"

declare -A MISE_LANGUAGES_EXTRAS

CPU_ARCH="$(uname -m)"
OS_TYPE="$(uname | tr "[:upper:]" "[:lower:]")"
OS_DISTRO=
OS_IN_WSL=

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

_error() {
  local message="${1:-}"

  printf "\e[31;1mERROR:\e[0m %s\n\n" "${message}" >&2
  exit 1
}

_info() {
  local message="${1:-}"
  printf "\n\n\e[36;1m%s:\e[0m\n\n" "${message}"
}

_local_only() {
  [ -z "${LOCAL}" ] && return 1

  if [ "${PWD}" != "${DOTFILES_PATH}" ]; then
    cp -R "${PWD}/." "${DOTFILES_PATH}"

    # Ensure the containerized environment starts fresh.
    if [ -n "${IN_CONTAINER}" ]; then
      rm \
        "${DOTFILES_PATH}/.config/zsh/.zsh_history" \
        "${DOTFILES_PATH}/.config/zsh/.aliases.local" \
        "${DOTFILES_PATH}/.config/zsh/.zprofile.local" \
        "${DOTFILES_PATH}/.config/zsh/.zshrc.local" \
        "${DOTFILES_PATH}/.config/git/config.local"

      if grep -q "git@github.com:" "${DOTFILES_PATH}/.git/config"; then
        sed -i "s|git@github.com:|https://github.com/|g" "${DOTFILES_PATH}/.git/config"
      fi
    fi
  fi

  printf "They've been locally copied to '%s'\n" "${DOTFILES_PATH}"
}

_no_system_packages() {
  cat <<EOF
System package installation isn't supported with your distro (${OS_DISTRO})

Please install any comparable packages on your own, you can view the list at:

    https://github.com/nickjj/dotfiles/blob/master/install

Then re-run this script and explicitly skip installing system packages:

    bash <(curl -sS https://raw.githubusercontent.com/nickjj/dotfiles/master/install) --skip-system-packages
EOF

  exit 1
}

_install_packages_arch() {
  # shellcheck disable=SC2086
  sudo pacman -Syu --noconfirm ${PACMAN_PACKAGES} ${PACMAN_PACKAGES_EXTRAS}

  # Install Mise packages.
  echo
  # shellcheck disable=SC2086
  if [[ -n "${MISE_PACKAGES_ARCH}" || -n "${MISE_PACKAGES_ARCH_EXTRAS}" ]]; then
    mise use --global ${MISE_PACKAGES_ARCH} ${MISE_PACKAGES_ARCH_EXTRAS}
  fi
}

_install_packages_debian() {
  # shellcheck disable=SC2086
  sudo apt-get update && sudo apt-get install -y ${APT_PACKAGES} ${APT_PACKAGES_EXTRAS}

  # Install Mise.
  sudo install -dm 755 /etc/apt/keyrings
  curl -fsSL https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1>/dev/null
  echo "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main" | sudo tee /etc/apt/sources.list.d/mise.list
  sudo apt-get update && sudo apt-get install -y mise

  # Install Mise packages.
  #
  # Apt's packages typically have older versions since Debian and Ubuntu are
  # stable distros. In most cases the version included is fine but we do want
  # the latest and greatest versions for certain tools.
  echo
  # shellcheck disable=SC2086
  if [[ -n "${MISE_PACKAGES_DEBIAN}" || -n "${MISE_PACKAGES_DEBIAN_EXTRAS}" ]]; then
    mise use --global ${MISE_PACKAGES_DEBIAN} ${MISE_PACKAGES_DEBIAN_EXTRAS}
  fi

  # Install packages manually since they don't exist elsewhere.

  # fastfetch, Debian 13 / Ubuntu 26.04 LTS will have it in apt by default.
  echo
  curl -fsSL https://github.com/fastfetch-cli/fastfetch/releases/latest/download/fastfetch-linux-amd64.deb -o /tmp/fastfetch.deb
  sudo dpkg -i "${_}"
  rm "${_}"

  # git-delta, Debian 13 will have it in apt by default, Ubuntu 24.04+ LTS has it.
  echo
  curl -fsSL https://github.com/dandavison/delta/releases/download/0.18.2/git-delta_0.18.2_amd64.deb -o /tmp/git-delta.deb
  sudo dpkg -i "${_}"
  rm "${_}"
}

_install_packages_macos() {
  local prefix="/opt/homebrew"
  [[ "${CPU_ARCH}" == "x86_64" ]] && prefix="/usr/local"

  # Ensure brew's paths are available for this script
  eval "$(${prefix}/bin/brew shellenv)"

  # shellcheck disable=SC2086
  brew install ${BREW_PACKAGES} ${BREW_PACKAGES_EXTRAS}

  # Install Mise packages.
  echo
  # shellcheck disable=SC2086
  if [[ -n "${MISE_PACKAGES_BREW}" || -n "${MISE_PACKAGES_BREW_EXTRAS}" ]]; then
    mise use --global ${MISE_PACKAGES_BREW} ${MISE_PACKAGES_BREW_EXTRAS}
  fi
}

_display_packages_output() {
  local packages="${1:-}"
  local packages_extras="${2:-}"
  local mise="${3:-}"
  local mise_extras="${4:-}"

  if [ -n "${packages}" ]; then
    echo ":: Packages (default)"
    echo -n "${packages}"
  fi

  if [ -n "${packages_extras}" ]; then
    echo ":: Packages (extras)"
    echo "${packages_extras}"
  fi

  if [ -n "${mise}" ]; then
    echo ":: Mise (default)"
    echo -n "${mise}"
  fi

  if [ -n "${mise_extras}" ]; then
    echo ":: Mise (extras)"
    echo "${mise_extras}"
  fi
}

_display_packages() {
  if [ "${OS_TYPE}" == "linux" ]; then
    if [ "${OS_DISTRO}" == "arch" ]; then
      _display_packages_output "${PACMAN_PACKAGES}" "${PACMAN_PACKAGES_EXTRAS}" \
        "${MISE_PACKAGES_ARCH}" "${MISE_PACKAGES_ARCH_EXTRAS}"
    elif [ "${OS_DISTRO}" == "debian" ]; then
      _display_packages_output "${APT_PACKAGES}" "${APT_PACKAGES_EXTRAS}" \
        "${MISE_PACKAGES_DEBIAN}" "${MISE_PACKAGES_DEBIAN_EXTRAS}"
    fi
  else
    _display_packages_output "${BREW_PACKAGES}" "${BREW_PACKAGES_EXTRAS}" \
      "${MISE_PACKAGES_MACOS}" "${MISE_PACKAGES_MACOS_EXTRAS}"
  fi
}

# -----------------------------------------------------------------------------
# Main functions
# -----------------------------------------------------------------------------

detect_env() {
  case "${OS_TYPE}" in
  linux)
    if [ -r /etc/os-release ]; then
      # shellcheck disable=SC1091
      OS_DISTRO="$(. /etc/os-release && echo "${ID_LIKE:-${ID}}")"

      # Technically ID_LIKE can have a space separated list of distros but
      # we really only care that we have a Debian based system where apt is
      # available to use.
      [[ "${OS_DISTRO}" =~ (ubuntu|debian) ]] && OS_DISTRO="debian"
    fi

    # Only fully support these Linux distros.
    if [[ -z "${OS_DISTRO}" || ! "arch ubuntu debian raspbian" =~ ${OS_DISTRO} ]]; then
      [ -z "${SKIP_SYSTEM_PACKAGES}" ] && _no_system_packages
    fi

    # Are we in WSL?
    if grep -q "\-WSL2" /proc/version; then
      OS_IN_WSL=1
    fi

    # Adjust packages depending on which display server is in use.
    if [[ -z "${WAYLAND_DISPLAY}" ]]; then
      PACMAN_PACKAGES="${PACMAN_PACKAGES//wl-clipboard/xclip}"
      DEBIAN_PACKAGES="${DEBIAN_PACKAGES//wl-clipboard/xclip}"
    fi

    ;;
  darwin) ;;
  *)
    _error "'${OS_TYPE}' is not supported"

    ;;
  esac
}

warn_root() {
  # Root will have an effective uid of 0, but it's ok if we're in a container.
  [[ "${EUID}" != 0 || -n "${IN_CONTAINER}" ]] && return 0

  cat <<EOF
Here are details about this user:

$(id)

EOF

  local msg="as root"
  [[ -n "${SUDO_USER}" ]] && msg="with sudo as ${SUDO_USER}"

  while true; do
    read -rp "This script is meant to run as a non-root user, are you sure you want to run this ${msg}? (y/n) " yn
    case "${yn}" in
    [Yy]*) break ;;
    [Nn]*) exit ;;
    *) printf "Please answer y or n\n\n" ;;
    esac
  done
}

check_prereqs() {
  _info "CHECKING SYSTEM COMPATABILITY"

  local missing_packages=()

  if ! command -v "sudo" 1>/dev/null; then missing_packages+=("sudo"); fi

  if [[ -z "${missing_packages[*]}" ]]; then
    echo "Everything is good to go"
    return 0
  fi

  cat <<EOF
This script is going to switch to the root user to install sudo then the rest
of the script will run as your user and use sudo as needed.

EOF

  case "${OS_DISTRO}" in
  arch)
    su -c "pacman -Syu --noconfirm ${missing_packages[*]}"
    ;;
  debian)
    su -c "apt-get update && apt-get install -y ${missing_packages[*]}"
    ;;
  *) ;;
  esac
}

create_initial_dirs() {
  mkdir -p "${HOME}/.config/tmux/plugins" "${HOME}/.config/git" "${HOME}/.config/zsh" "${HOME}/.cache/zsh" \
    "${HOME}/.local/bin" "${HOME}/.local/share"
}

install_packages() {
  _info "INSTALL PACKAGES"

  if [ -n "${SKIP_SYSTEM_PACKAGES}" ]; then
    echo "Skipping, you've chosen not to or your distro isn't fully supported"
    return
  fi

  cat <<EOF
If you choose y, all of the system packages below will be installed:

$(_display_packages)


If you choose no, the above packages will not be installed and this script
will exit. This gives you a chance to edit the list of packages.

EOF

  if [ -n "${FIRST_RUN}" ]; then
    cat <<EOF
Given this is the first time you've run this script, the 'install-config'
file isn't available. That gets created in your new dotfiles directory that
will get created after running this script to completion at least once.

In the mean time, if you want to modify the list now you have a few options:

1. Let this run as is and then modify the package list later
2. Temporarily copy the example install-config from the repo[0] and create install-config in your current directory
  - The intent will be to move this file to your new dotfiles repo afterwards
  - You'll want to re-run this script after doing the above
3. Re-run this script with any environment variables defined in install-config
  - ie., XXX_PACKAGES_EXTRAS="bat eza" bash <(curl -sS https://raw.githubusercontent.com/nickjj/dotfiles/master/install)
  - This bypasses needing to temporarily create and move install-config

I'd suggest option 1 since you can always uninstall packages, but either of the
other 2 options are viable depending on how much you want to customize.

[0]: https://github.com/nickjj/dotfiles/blob/master/install-config.example

EOF
  else
    printf "You can edit 'install-config' to modify the package list.\n\n"
  fi

  while true; do
    read -rp "Do you want to install the above packages? (y/n) " yn
    case "${yn}" in
    [Yy]*)
      if [ "${OS_TYPE}" == "linux" ]; then
        if [ "${OS_DISTRO}" == "arch" ]; then
          _install_packages_arch
        elif [ "${OS_DISTRO}" == "debian" ]; then
          _install_packages_debian
        fi
      else
        _install_packages_macos
      fi

      break
      ;;
    [Nn]*) exit ;;
    *) printf "Please answer y or n\n\n" ;;
    esac
  done
}

update_dotfiles() {
  _info "UPDATE DOTFILES"

  if [ -z "${DOTFILES_PATH:-}" ]; then
    echo "Skipping, since this is the first time you've run this script"
    return 0
  fi

  _local_only && return 0

  git -C "${DOTFILES_PATH}" fetch origin

  local new_commit_count=
  new_commit_count="$(git -C "${DOTFILES_PATH}" rev-list ..origin --count)"

  if [ "${new_commit_count}" = "0" ]; then
    echo "Skipping, since your local dotfiles already have the latest updates"
  else
    # Let's merge the latest updates.
    git -C "${DOTFILES_PATH}" merge origin

    # Re-run this script because if an update happened, it's possible new
    # packages are meant to be installed which means reading in their env vars.
    exec "${0}" "${@}"
  fi

  cp -n "${DOTFILES_PATH}/install-config.example" "${DOTFILES_PATH}/install-config"
}

clone_dotfiles() {
  _info "CLONE DOTFILES"

  if [ -d "${DOTFILES_PATH:-}" ]; then
    echo "Skipping, since DOTFILES_PATH already exists at '${DOTFILES_PATH}'"
    return 0
  fi

  local default_dotfiles_path="${HOME}/dotfiles"

  read -rep "Where do you want to clone these dotfiles to [${default_dotfiles_path}]? " dotfiles_path
  echo

  [[ -z "${dotfiles_path}" ]] && dotfiles_path="${default_dotfiles_path}"

  DOTFILES_PATH="${dotfiles_path//\~/"${HOME}"}"

  _local_only && return 0

  git clone "${DOTFILES_URL}" "${DOTFILES_PATH}"

  cp -n "${DOTFILES_PATH}/install-config.example" "${DOTFILES_PATH}/install-config"
}

install_zsh_plugins() {
  _info "INSTALL ZSH PLUGINS"

  "${DOTFILES_PATH}/.local/bin/update-zsh-plugins"
}

create_symlinks() {
  _info "CREATE SYMLINKS"

  local symlinks=(
    "ln -fs \"${DOTFILES_PATH}/.zshenv\" \"${HOME}/.zshenv\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/.zshrc\" \"${HOME}/.config/zsh/.zshrc\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/.zshrc.local\" \"${HOME}/.config/zsh/.zshrc.local\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/.zprofile\" \"${HOME}/.config/zsh/.zprofile\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/.zprofile.local\" \"${HOME}/.config/zsh/.zprofile.local\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/.aliases\" \"${HOME}/.config/zsh/.aliases\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/.aliases.local\" \"${HOME}/.config/zsh/.aliases.local\""
    "ln -fs \"${DOTFILES_PATH}/.config/tmux/tmux.conf\" \"${HOME}/.config/tmux/tmux.conf\""
    "ln -fs \"${DOTFILES_PATH}/.config/zsh/themes\" \"${HOME}/.config/zsh/themes\""
    "ln -fs \"${DOTFILES_PATH}/.config/tmux/themes\" \"${HOME}/.config/tmux/themes\""
    "ln -fs \"${DOTFILES_PATH}/.config/git/config\" \"${HOME}/.config/git/config\""
    "ln -fs \"${DOTFILES_PATH}/.config/git/config.local\" \"${HOME}/.config/git/config.local\""
    "ln -fs \"${DOTFILES_PATH}/.config/gitui\" \"${HOME}/.config/gitui\""
    "ln -fs \"${DOTFILES_PATH}/.config/nvim\" \"${HOME}/.config/nvim\""
    "ln -fs \"${DOTFILES_PATH}/.local/bin/\"* \"${HOME}/.local/bin/\""
  )

  local symlinks_system=()

  if [ -n "${OS_IN_WSL}" ]; then
    symlinks_system+=("sudo ln -fs \"${DOTFILES_PATH}/etc/wsl.conf\" \"/etc/wsl.conf\"")
  fi

  if [ "${OS_DISTRO}" = "arch" ]; then
    symlinks_system+=("sudo ln -fs \"${DOTFILES_PATH}/etc/pacman.d/01-options.conf\" \"/etc/pacman.d/01-options.conf\"")

    if [ -f "etc/pacman.d/02-ignore.conf" ]; then
      symlinks_system+=("sudo ln -fs \"${DOTFILES_PATH}/etc/pacman.d/02-ignore.conf\" \"/etc/pacman.d/02-ignore.conf\"")
    else
      sudo rm -f "/etc/pacman.d/02-ignore.conf"
    fi
  fi

  printf -- "-------------------------------------------------------------------------------\n\n"

  for link in "${symlinks[@]}"; do
    echo "${link}"
  done

  for link in "${symlinks_system[@]}"; do
    echo "${link}"
  done

  cat <<EOF

-------------------------------------------------------------------------------

A potentially destructive action is about to happen. The above directories and
files are going to get forcefully symlinked if you type y in the prompt below.

What does that mean?

Any config files you have on the right hand side of the paths are going to get
overwritten with the files that come with these dotfiles (left side).

Without these symlinks, these dotfiles will not work. If you plan to type y
and have existing files now would be a good time to back them up.

EOF

  while true; do
    read -rep "Ready to continue? Enter y to apply them all or n to skip (y/n) " yn
    case "${yn}" in
    [Yy]*)
      # Avoid using ln -T flag since it doesn't exist on macOS. We're being
      # extra careful here to only delete symlinks if they exist. Technically
      # rm -f would work but that could delete real files potentially.
      [ -L "${HOME}/.config/zsh/themes" ] && rm "${HOME}/.config/zsh/themes"
      [ -L "${HOME}/.config/tmux/themes" ] && rm "${HOME}/.config/tmux/themes"
      [ -L "${HOME}/.config/gitui" ] && rm "${HOME}/.config/gitui"
      [ -L "${HOME}/.config/nvim" ] && rm "${HOME}/.config/nvim"

      for link in "${symlinks[@]}"; do
        eval "${link}"
      done

      for link in "${symlinks_system[@]}"; do
        eval "${link}"
      done

      break
      ;;
    [Nn]*)

      break
      ;;
    *) echo "Please answer y or n" ;;
    esac
  done
}

configure_system_configs() {
  _info "CONFIGURE SYSTEM CONFIGS"

  if [ "${OS_DISTRO}" = "arch" ]; then
    local etc_pacman_conf_path="/etc/pacman.conf"
    if ! grep -q "Include = /etc/pacman\.d/\*\.conf" "${etc_pacman_conf_path}" 2>/dev/null; then
      printf "\nInclude = /etc/pacman.d/*.conf\n" | sudo tee --append "${etc_pacman_conf_path}" 1>/dev/null
    fi
  fi

  echo "Everything that required updating was updated"
}

configure_shell() {
  _info "CONFIGURE SHELL (ZSH)"

  local local_files=(".zshrc.local" ".zprofile.local" ".aliases.local")
  local original_dotfiles_path="${DOTFILES_PATH}"

  for file in "${local_files[@]}"; do
    local file_path="${HOME}/.config/zsh/${file}"

    if [ ! -f "${file_path}" ]; then
      printf "# shellcheck shell=bash\n\n# Any settings defined here are gitignored.\n" >"${file_path}"
    fi
  done

  local zprofile_path="${DOTFILES_PATH}/.config/zsh/.zprofile.local"

  if ! grep -q "^export DOTFILES_PATH=.*$" "${zprofile_path}" 2>/dev/null; then
    printf '\nexport DOTFILES_PATH="%s"\n' "${DOTFILES_PATH}" >>"${zprofile_path}"
  fi

  if [ "${OS_TYPE}" == "darwin" ]; then
    if ! grep -q "HOMEBREW_NO_ANALYTICS" "${zprofile_path}" 2>/dev/null; then
      printf '\nexport HOMEBREW_NO_ANALYTICS=1\n' >>"${zprofile_path}"
    fi

    if ! grep -q "eval.*homebrew.*shellenv" "${zprofile_path}" 2>/dev/null; then
      local prefix="/opt/homebrew"
      [[ "${CPU_ARCH}" == "x86_64" ]] && prefix="/usr/local"

      # shellcheck disable=SC2016
      printf "\neval \"\$(%s/bin/brew shellenv)\"\n" "${prefix}" >>"${zprofile_path}"
    fi
  else
    # Are we in WSL 2?
    if [ -n "${OS_IN_WSL}" ]; then
      # This only applies if you have Docker installed without Docker Desktop
      # and you're not using systemd.
      if command -v docker >/dev/null 2>&1; then
        if [ ! -d "${HOME}/.docker/desktop" ]; then
          if [ ! -d /run/systemd/system ]; then
            if ! grep -q "^if service docker status.*$" "${zprofile_path}" 2>/dev/null; then
              local docker=
              docker=$(
                cat <<'EOF'
# Ensure Docker is running on WSL 2. This expects you've installed Docker and
# Docker Compose directly within your WSL distro instead of Docker Desktop, such as:
#   - https://nickjanetakis.com/blog/install-docker-in-wsl-2-without-docker-desktop
if service docker status 2>&1 | grep -q "is not running"; then
  wsl.exe --distribution "${WSL_DISTRO_NAME}" --user root \
    --exec /usr/sbin/service docker start >/dev/null 2>&1
fi
EOF
              )

              printf "\n\n%s" "${docker}" >>"${zprofile_path}"
            fi
          fi
        fi
      fi
    fi

    # This should happen on all Linux distros.
    [ "${SHELL: -3}" != "zsh" ] && chsh -s "/usr/bin/zsh"
  fi

  # shellcheck disable=SC1091
  . "${HOME}/.config/zsh/.zprofile"

  # Given the above line sets this env var if it's defined, this ensures we
  # always use the value that was set when running this script. This is mainly
  # to make testing this script easier in Docker since the .local files are
  # volume mounted and this value will be different in Docker.
  DOTFILES_PATH="${original_dotfiles_path}"

  echo "It has been configured in '${HOME}/.config/zsh/'"
}

ask_for_name() {
  _info "ASKING FOR YOUR NAME TO CONFIGURE GIT"

  local name=

  set +o errexit
  name="$(git config user.name)"
  set -o errexit

  if [[ -n "${name}" ]]; then
    echo "Skipping, since '${name}' was retrieved from your git config"
  else
    [ -n "${YOUR_NAME}" ] &&
      echo "Skipping, since '${YOUR_NAME}' was retrieved from your install config" &&
      return 0

    while true; do
      printf "What is your full name (ie. Dade Murphy)? "
      read -r name

      if [[ ${name} =~ [^[:space:]]+ ]]; then
        break
      else
        printf "Please enter at least your first name\n\n"
      fi
    done
  fi

  YOUR_NAME="${name}"
}

ask_for_email() {
  _info "ASKING FOR YOUR EMAIL TO CONFIGURE GIT"

  local email=

  set +o errexit
  email="$(git config user.email)"
  set -o errexit

  if [[ -n "${email}" ]]; then
    echo "Skipping, since '${email}' was retrieved from your git config"
  else
    [ -n "${YOUR_EMAIL}" ] &&
      echo "Skipping, since '${YOUR_EMAIL}' was retrieved from your install config" &&
      return 0

    while true; do
      printf "What is your email address (ie. zerocool@example.com)? "
      read -r email

      if [[ ${email} =~ .+@.+ ]]; then
        break
      else
        printf "Please enter a valid email address\n\n"
      fi
    done
  fi

  YOUR_EMAIL="${email}"
}

create_ssh_key() {
  _info "CREATING SSH KEY"

  local -r key_path="${HOME}/.ssh/id_ed25519"

  if [[ -f "${key_path}" ]]; then
    echo "Skipping, since a key already exists at '${key_path}'"
  else
    ssh-keygen -t ed25519 -C "${YOUR_EMAIL}" -N "" -f "${key_path}"
  fi

  _info "SHOWING PUBLIC SSH KEY"

  cat "${key_path}.pub"
}

create_gpg_key() {
  _info "CREATING GPG KEY"

  local gpg_home="${GNUPGHOME:-"${HOME}/.gnupg"}"
  local gpg_key=

  set +o errexit
  gpg_key="$(gpg --export --armor "${YOUR_EMAIL}" 2>/dev/null)"
  set -o errexit

  if [[ "${gpg_key}" =~ "PGP PUBLIC KEY" ]]; then
    echo "Skipping, since a key already exists for '${YOUR_EMAIL}'"
  else
    mkdir -p "${gpg_home}"
    chmod 700 "${gpg_home}"

    while true; do
      printf "Please set a passphrase (password) for your key: "
      read -sr passphrase

      if [[ ! ${passphrase} =~ [^[:space:]]+ ]]; then
        printf "\nPlease enter at least 1 non-space character\n\n"
        continue
      fi

      printf "\n\nPlease confirm your passphrase: "
      read -sr passphrase_confirm

      [ "${passphrase}" = "${passphrase_confirm}" ] && break

      printf "\nYour passphrase did not match, please try again\n\n"
    done

    printf "\n\nGenerating GPG key...\n\n"

    gpg --batch --gen-key <<EOF
     Key-Type: 1
     Key-Length: 3072
     Subkey-Type: 1
     Subkey-Length: 3072
     Name-Real: ${YOUR_NAME}
     Name-Email: ${YOUR_EMAIL}
     Passphrase: ${passphrase}
     Expire-Date: 1y
EOF

    gpg_key="$(gpg --export --armor "${YOUR_EMAIL}" 2>/dev/null)"
  fi

  _info "SHOWING PUBLIC GPG KEY"

  echo "${gpg_key}" | gpg --show-keys
}

configure_git() {
  _info "CONFIGURE GIT"

  local git_config_local_path="${DOTFILES_PATH}/.config/git/config.local"

  if [ ! -f "${git_config_local_path}" ]; then
    cat <<EOF >"${git_config_local_path}"
[user]
  name = ${YOUR_NAME}
  email = ${YOUR_EMAIL}

# Uncomment the options below to auto-sign your git commits / tags using GPG.
# Learn more about signing git commits here:
#   https://nickjanetakis.com/blog/signing-and-verifying-git-commits-on-the-command-line-and-github

#[commit]
#  gpgsign = true

# This option requires git 2.23+ to work and you must annotate your tags,
# although -m "" works if you want an empty message.
#[tag]
#  gpgSign = true

[delta]
  # If you prefer side by side diffs, uncomment this.
  #side-by-side = true
EOF
  fi

  echo "It has been configured in '$(dirname "${git_config_local_path}")'"
}

install_programming_languages() {
  _info "INSTALL PROGRAMMING LANGUAGES"

  for lang in "${!MISE_LANGUAGES[@]}"; do
    [ -z "${MISE_LANGUAGES[${lang}]}" ] && continue

    printf "\nInstalling %s...\n\n" "${MISE_LANGUAGES[${lang}]}"
    if command -v "${HOME}/.local/share/mise/shims/${lang}" 1>/dev/null; then
      echo "Skipping, it's already installed, run 'mise upgrade ${lang} --bump' to upgrade"
    else
      mise use --global "${MISE_LANGUAGES[${lang}]}"
    fi

    # Also install Yarn for Node.
    if [ "${lang}" = "node" ]; then
      if ! yarn --version >/dev/null 2>&1; then
        npm install --unsafe-perm=true --allow-root --global yarn
      fi
    fi
  done

  for lang in "${!MISE_LANGUAGES_EXTRAS[@]}"; do
    [ -z "${MISE_LANGUAGES_EXTRAS[${lang}]}" ] && continue

    printf "\nInstalling %s...\n\n" "${MISE_LANGUAGES_EXTRAS[${lang}]}"
    if command -v "${HOME}/.local/share/mise/shims/${lang}" 1>/dev/null; then
      echo "Skipping, it's already installed, run 'mise upgrade ${lang} --bump' to upgrade"
    else
      mise use --global "${MISE_LANGUAGES_EXTRAS[${lang}]}"
    fi
  done
}

install_tmux_plugins() {
  _info "INSTALL TMUX PLUGINS"

  local plugin_path="${HOME}/.config/tmux/plugins"
  local tpm_path="${plugin_path}/tpm"

  rm -rf "${tpm_path}"
  git clone --depth 1 https://github.com/tmux-plugins/tpm "${tpm_path}"

  "${tpm_path}/bin/install_plugins"
}

install_nvim_plugins() {
  _info "INSTALL NEOVIM PLUGINS"

  nvim +q

  echo "They've been installed"
}

healthcheck() {
  _info "CHECK INFORMATION AND VERSIONS"

  cat <<EOF
:: Dotfiles path:

${DOTFILES_PATH}

:: Git user:

$(git config --get-regex "user.(name|email)")

:: tmux:

$(tmux -V)

:: Neovim:

$(nvim --version)

:: Fastfetch:

EOF

  fastfetch
}

completed_message() {
  _info "NEXT STEPS (MAKE IT YOUR OWN)"

  cat <<EOF
Check out the README file on GitHub for any next steps:

https://github.com/nickjj/dotfiles#-make-it-your-own

You can safely close this terminal.

The next time you open your terminal everything will be ready to go!
EOF

  if [ "${OS_TYPE}" == "darwin" ]; then
    cat <<EOF

P.S., it looks like you're on macOS.

If you're using iTerm2 as your terminal you'll want to goto Settings ->
Profiles -> Keys (tab) and then change your ALT keys to use "Esc+" instead of
"Normal", otherwise ALT+x keymaps in Neovim may not work.

If you're not using iTerm2 you may still need to do similar steps.
EOF
  fi
}

case "${1:-}" in
--diff | -d)
  # Show a diff of any local uncommitted or committed changes vs the target.
  #
  # Since we have fzf, let's use it to make browsing diffs a nice experience!
  target="${2:-origin}"
  side_by_side="${3:-}"

  # Since target is optional we need to handle only passing in --side.
  if [ "${target}" = "--side" ]; then
    target="origin"
    side_by_side="--side"
  fi

  git remote | grep -q "${target//./}" && git fetch "${target//./}"

  gd "${target}" "${side_by_side}"

  _info "CONDENSED GIT DIFF"
  GIT_PAGER="" git diff "${target}" --compact-summary

  exit
  ;;
--changelog | -c)
  # Show details about new commits that only exist in the target vs local.
  target="${2:-..origin}"

  git remote | grep -q "${target//./}" && git fetch "${target//./}"
  git log "${target}" --pretty="format:%C(magenta)%h %C(green)%ad %C(yellow)> %C(reset)%s" --date=short

  exit
  ;;
--update | -u)
  ONLY_UPDATE=1
  ;;
--skip-system-packages | -S) ;;
--help | -h)
  cat <<EOF
Usage examples:

# Pull in remote updates and run the script to update your dotfiles.
./install

# Only pull in remote updates and exit early.
./install --update

# Update your dotfiles with whatever version of this script that exists locally.
LOCAL=1 ./install

# Show a diff of any local uncommited or committed changes vs the remote.
./install --diff [target] (it defaults to "origin" if not supplied)

# The same as above but show the diff in side-by-side (split) mode.
./install --diff --side

# Compare your currently checked out branch to your local master branch, this
# could be helpful if you have a personalized branch and you pull updates into
# master and now you want to compare them locally.
./install --diff master

# Show new remote commits that do not exist locally.
./install --changelog [target] (it defaults to "..origin" if not supplied)

# Show your local commits that don't exist in the remote.
./install --changelog origin..

# The same as above except compare it to your local master branch not remote.
./install --changelog ..master

# Show your local commits that don't exist in the remote and new remote commits.
./install --changelog origin...

# The same as above except compare it to your local master branch not remote.
./install --changelog ...master

# Show this help menu.
./install --help
EOF
  exit
  ;;
*)
  [ -n "${1:-}" ] && _error "'${1}' is not a supported flag"

  ;;
esac

detect_env
warn_root
update_dotfiles "${@}" && [ -n "${ONLY_UPDATE}" ] && exit
check_prereqs
create_initial_dirs
install_packages
clone_dotfiles
install_zsh_plugins
create_symlinks
configure_system_configs
configure_shell
ask_for_name
ask_for_email
create_ssh_key
create_gpg_key
configure_git
install_programming_languages
install_tmux_plugins
install_nvim_plugins
healthcheck
completed_message
